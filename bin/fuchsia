#!/usr/bin/env sage
# vi:filetype=python
"""\033[35;1mFuchsia v%s\033[0m -- a tool for reducing differential equations for multiloop master integrals

Authors:
  Oleksandr Gituliar, The PAS Institute of Nuclear Physics, Cracow (Poland)
  Vitaly Magerya

\033[35;1mUsage:\033[0m
  fuchsia (fuchsify | normalize | factorize) [-x <var>] [-e <var>] [--profile <file>] [--log debug | info] [-m <file>] [-t <file>] <file>

Options:
  -x <var>           x variable name [default: x]
  -e <var>           eps variable name [default: eps]
  -m <file>          new matrix M after transformation
  -t <file>          transformation matrix T
  --log <level>      logger verbosity level [default: info]
  --profile <file>   write profile statistics to <file_stats>

Arguments:
  <file>             matrix M
"""
from   contextlib import contextmanager
import logging

from   docopt import docopt

from   sage.all import SR
from   fuchsia import (__commit__, __version__, export_matrix_to_file, import_matrix_from_file,
           partial_fraction, factor_epsilon, fuchsify, normalize)

logger = logging.getLogger('fuchsia')


@contextmanager
def profile(file_stats):
    if file_stats is None:
        yield
        return

    import cProfile, pstats
    profile = cProfile.Profile()
    profile.enable()
    try:
        yield
    finally:
        profile.disable()
        with open(file_stats, 'w') as f:
            stats = pstats.Stats(profile, stream=f).sort_stats("cumulative")
            stats.print_stats(50)

def main(args):
    print('\033[35;1mFuchsia v%s (commit: %s)\033[0m' % (__version__, __commit__))
    print """Authors:
    Oleksandr Gituliar, The PAS Institute of Nuclear Physics, Cracow (Poland)
    Vitaly Magerya
    """
    logger.setLevel({'debug': logging.DEBUG, 'info': logging.INFO}.get(args['--log']))

    m = import_matrix_from_file(args['<file>'])
    x = SR.var(args['-x'])
    eps = SR.var(args['-e'])

    with profile(args['--profile']):
        if args['fuchsify']:
            m, t = fuchsify(m, x)
        elif args['normalize']:
            m, t = normalize(m, x, eps)
        elif args['factorize']:
            m, t = factor_epsilon(m, x, eps)

    if args['-m']:
        m = partial_fraction(m, x)
        export_matrix_to_file(args['-m'], m)
    if args['-t']:
        t = partial_fraction(t, x)
        export_matrix_to_file(args['-t'], t)


if __name__ == '__main__':
    try:
        main(docopt(__doc__ % (__version__)))
    except Exception as error:
       raise
