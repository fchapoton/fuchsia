#!/usr/bin/env sage
# vi:filetype=python
"""delirium -- a reducer of differential equations for multiloop master integrals

Usage:
  delirium reduce (--lee | --maple | --moser) [-p <point>] [-o <file_output>] <file_input>

Options:
  --lee             use Lee algorithm (improved Moser algorithm)
  --maple           use Maple's super_reduce routine from DETools module
  --moser           use Moser algorithm
  -o <file_output>  output file name
  -p <point>        polinomial in x [default: x]

Arguments:
  <file_input>      input file name
"""
import logging

from   docopt_dispatch import dispatch as docopt_dispatch

from   delirium import __version__
from   delirium.maple import super_reduce
from   delirium.matrix import degree_low, export_matrix, import_matrix, partial_fraction, var
from   delirium.reduction import fuchsianize, reduce_at_one_point

log = logging.getLogger('delirium')

def main():
    print('\033[35m'+'Delirium v'+__version__+'\033[0m')
    print """Authors:
    Oleksandr Gituliar, Institute of Nuclear Physics, Krakow (Poland)
    Vitaly Magerya
    """
    docopt_dispatch(__doc__)

@docopt_dispatch.on('reduce')
def on_maple_reduce(file_input, **kwargs):
    with open(file_input, 'r') as f:
        m = import_matrix(f)

    point = kwargs.get('p')
    x = var('x')
    if kwargs.get('lee'):
        mm, t = fuchsianize(m, x)
    if kwargs.get('maple'):
        mm, t = super_reduce(m, point)
    if kwargs.get('moser'):
        p = -1*degree_low(m, point)
        mm, t = reduce_at_one_point(m, x, 0, p)

    mm = partial_fraction(mm, x)

    file_output = kwargs.get('o')
    if file_output is not None:
        with open(file_output, 'w') as f:
            export_matrix(f, mm)
    else:
        print mm

if __name__ == '__main__':
    main()

