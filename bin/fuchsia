#!/usr/bin/env sage
# vi:filetype=python
"""fuchsia -- a reducer of differential equations for multiloop master integrals

Usage:
  fuchsia reduce [--profile <file_stats>] (--lee | --maple | --normalize) [-p <point>] [-o <file_output>] <file_input>
  fuchsia normalize [--profile <file_stats>] [-v debug | info] -m <output> -t <output> <file_input>

Options:
  --lee                  use Lee algorithm (improved Moser algorithm)
  --maple                use Maple's super_reduce routine from DETools module
  --normalize            normalize eigenvalues
  --profile <file_stats> profile and write statistics to <file_stats>
  -m <output>            new matrix m
  -t <output>            transformation matrix
  -p <point>             polinomial in x [default: x]
  -v <level>             verbosity level [default: info]

Arguments:
  <file_input>           input file name
"""
from   contextlib import contextmanager
import logging

from   docopt_dispatch import dispatch as docopt_dispatch

from   fuchsia import __version__
from   fuchsia.maple import super_reduce
from   fuchsia.matrix import degree_low, export_matrix, import_matrix, partial_fraction, var
from   fuchsia.reduction import fuchsify, normalize

logger = logging.getLogger('fuchsia')


@contextmanager
def profile(file_stats):
    if file_stats is None:
        yield
        return

    import cProfile, pstats
    profile = cProfile.Profile()
    profile.enable()
    try:
        yield
    finally:
        profile.disable()
        with open(file_stats, 'w') as f:
            stats = pstats.Stats(profile, stream=f).sort_stats("cumulative")
            stats.print_stats(50)

def main():
    print('\033[35;1mFuchsia v%s\033[0m' % __version__)
    print """Authors:
    Oleksandr Gituliar, The PAS Institute of Nuclear Physics, Krakow (Poland)
    Vitaly Magerya
    """
    docopt_dispatch(__doc__)

@docopt_dispatch.on('normalize')
def on_normalize(file_input, **kwargs):
    verbosity = kwargs.get('v')
    if verbosity == 'debug':
        logger.setLevel(logging.DEBUG)
    elif verbosity == 'info':
        logger.setLevel(logging.INFO)

    with open(file_input, 'r') as f:
        m = import_matrix(f)

    with profile(kwargs.get('profile')):
        x = var('x')
        epsilon = var('eps')
        m, t = normalize(m, x, epsilon)
        m = partial_fraction(m, x)

    with open(kwargs.get('m'), 'w') as f:
        export_matrix(f, m)
    with open(kwargs.get('t'), 'w') as f:
        export_matrix(f, t)

@docopt_dispatch.on('reduce')
def on_reduce(file_input, **kwargs):
    with open(file_input, 'r') as f:
        m = import_matrix(f)

    with profile(kwargs.get('profile')):
        point = kwargs.get('p')
        x = var('x')
        if kwargs.get('lee'):
            mm, t = fuchsify(m, x)
        elif kwargs.get('maple'):
            mm, t = super_reduce(m, point)
        mm = partial_fraction(mm, x)


    file_output = kwargs.get('o')
    if file_output is not None:
        with open(file_output, 'w') as f:
            export_matrix(f, mm)
    else:
        print mm

if __name__ == '__main__':
    try:
        main()
    except Exception as error:
        raise

